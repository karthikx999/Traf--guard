{"ast":null,"code":"var _jsxFileName = \"C:\\\\network monitoring project\\\\frontend\\\\src\\\\index.js\";\nimport React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport App from './app';\nimport { createGlobalStyle } from 'styled-components';\n\n// Global styles\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst GlobalStyle = createGlobalStyle`\n  :root {\n    --primary: #00b4d8;\n    --primary-dark: #0077b6;\n    --primary-light: #90e0ef;\n    --secondary: #7209b7;\n    --secondary-light: #9d4edd;\n    --background: #0a0a1b;\n    --surface: #1a1a2e;\n    --surface-light: #2a2a3e;\n    --danger: #e63946;\n    --success: #06d6a0;\n    --warning: #ffd166;\n    \n    --text-primary: #ffffff;\n    --text-secondary: #d1d5db;\n    --text-tertiary: #9ca3af;\n  }\n\n  * {\n    box-sizing: border-box;\n    margin: 0;\n    padding: 0;\n  }\n\n  body {\n    font-family: 'Roboto', sans-serif;\n    background-color: var(--background);\n    color: var(--text-primary);\n    overflow-x: hidden;\n  }\n\n  h1, h2, h3, h4, h5, h6 {\n    font-family: 'Exo', sans-serif;\n    font-weight: 700;\n    letter-spacing: 0.5px;\n  }\n\n  a {\n    text-decoration: none;\n    color: inherit;\n  }\n\n  button {\n    font-family: 'Exo', sans-serif;\n    border: none;\n    outline: none;\n    cursor: pointer;\n  }\n\n  /* Scrollbar styling */\n  ::-webkit-scrollbar {\n    width: 6px;\n    height: 6px;\n  }\n\n  ::-webkit-scrollbar-track {\n    background: var(--surface);\n  }\n\n  ::-webkit-scrollbar-thumb {\n    background: var(--primary-dark);\n    border-radius: 3px;\n  }\n\n  ::-webkit-scrollbar-thumb:hover {\n    background: var(--primary);\n  }\n\n  /* For Firefox */\n  * {\n    scrollbar-width: thin;\n    scrollbar-color: var(--primary-dark) var(--surface);\n  }\n`;\n\n// Set up API mocking for development\n_c = GlobalStyle;\nif (process.env.NODE_ENV === 'development') {\n  const setupMockAPI = () => {\n    console.log('Setting up mock API responses for development');\n\n    // Setup mock fetch responses\n    const originalFetch = window.fetch;\n    window.fetch = function (url, options) {\n      // For testing - log all API calls\n      console.log(`API Call: ${url}`, options);\n\n      // If fetching from a real server, pass through\n      if (url.startsWith('http')) {\n        return originalFetch(url, options);\n      }\n\n      // Check if we should mock the response\n      if (url.includes('/api/metrics')) {\n        return Promise.resolve({\n          json: () => Promise.resolve({\n            traffic_rate: Math.floor(Math.random() * 100 + 50),\n            avg_response_time: Math.floor(Math.random() * 100 + 20),\n            security_score: Math.floor(Math.random() * 15 + 80),\n            traffic_history: Array.from({\n              length: 24\n            }, (_, i) => ({\n              timestamp: `${23 - i}:00`,\n              value: Math.floor(Math.random() * 100 + 50)\n            })).reverse(),\n            threat_distribution: [{\n              type: 'Intrusion',\n              count: Math.floor(Math.random() * 10 + 5)\n            }, {\n              type: 'DDoS',\n              count: Math.floor(Math.random() * 5 + 2)\n            }, {\n              type: 'Malware',\n              count: Math.floor(Math.random() * 8 + 3)\n            }, {\n              type: 'Phishing',\n              count: Math.floor(Math.random() * 12 + 6)\n            }]\n          }),\n          ok: true\n        });\n      } else if (url.includes('/api/threats')) {\n        return Promise.resolve({\n          json: () => Promise.resolve(Array.from({\n            length: 5\n          }, (_, i) => ({\n            id: i + 1,\n            type: ['Intrusion Attempt', 'Suspicious Traffic', 'Port Scan', 'DDoS Attempt', 'Data Exfiltration'][Math.floor(Math.random() * 5)],\n            source_ip: `192.168.1.${Math.floor(Math.random() * 255)}`,\n            timestamp: new Date(Date.now() - Math.floor(Math.random() * 3600000)).toISOString(),\n            severity: ['Low', 'Medium', 'High', 'Critical'][Math.floor(Math.random() * 4)],\n            details: 'Suspicious activity detected on network'\n          }))),\n          ok: true\n        });\n      } else if (url.includes('/api/anomalies')) {\n        return Promise.resolve({\n          json: () => Promise.resolve(Array.from({\n            length: 3\n          }, (_, i) => ({\n            id: i + 1,\n            type: ['Traffic Spike', 'Unusual Port Activity', 'Protocol Anomaly', 'Connection Pattern', 'Data Volume Anomaly'][Math.floor(Math.random() * 5)],\n            timestamp: new Date(Date.now() - Math.floor(Math.random() * 3600000)).toISOString(),\n            severity: ['Low', 'Medium', 'High'][Math.floor(Math.random() * 3)],\n            affected_metric: ['Bandwidth', 'Connection Count', 'Protocol Distribution'][Math.floor(Math.random() * 3)],\n            details: 'Unusual pattern detected in network traffic'\n          }))),\n          ok: true\n        });\n      } else if (url.includes('/api/status')) {\n        return Promise.resolve({\n          json: () => Promise.resolve({\n            active: Math.random() > 0.5,\n            packets_captured: Math.floor(Math.random() * 5000 + 1000),\n            duration: Math.floor(Math.random() * 300 + 60),\n            packets_per_second: Math.floor(Math.random() * 50 + 10)\n          }),\n          ok: true\n        });\n      } else if (url.includes('/api/start_analysis') || url.includes('/api/stop_analysis')) {\n        return Promise.resolve({\n          json: () => Promise.resolve({\n            message: url.includes('start') ? 'Analysis started successfully' : 'Analysis stopped successfully',\n            status: 'success'\n          }),\n          ok: true\n        });\n      } else if (url.includes('/api/security/overview')) {\n        return Promise.resolve({\n          json: () => Promise.resolve({\n            security_score: Math.floor(Math.random() * 15 + 80),\n            active_threats: Math.floor(Math.random() * 5),\n            vulnerabilities_count: Math.floor(Math.random() * 10 + 5),\n            protected_assets: Math.floor(Math.random() * 5 + 10),\n            last_threat_time: new Date(Date.now() - Math.floor(Math.random() * 3600000)).toISOString(),\n            security_status: Math.random() > 0.7 ? 'Good' : 'Fair'\n          }),\n          ok: true\n        });\n      } else if (url.includes('/api/security/vulnerabilities')) {\n        return Promise.resolve({\n          json: () => Promise.resolve(Array.from({\n            length: 7\n          }, (_, i) => ({\n            cve_id: `CVE-2024-${1000 + i}`,\n            severity: ['Low', 'Medium', 'High', 'Critical'][Math.floor(Math.random() * 4)],\n            description: ['Remote code execution vulnerability', 'SQL injection vulnerability', 'Cross-site scripting vulnerability', 'Authentication bypass vulnerability'][Math.floor(Math.random() * 4)],\n            affected_component: ['API Gateway', 'Web Frontend', 'Database', 'Authentication Service'][Math.floor(Math.random() * 4)],\n            status: ['Open', 'In Progress', 'Resolved'][Math.floor(Math.random() * 3)],\n            discovery_date: new Date(Date.now() - Math.floor(Math.random() * 30 * 86400000)).toISOString(),\n            remediation: 'Update to the latest version and apply security patches'\n          }))),\n          ok: true\n        });\n      }\n\n      // If no mock is defined, pass through to the actual fetch\n      return originalFetch(url, options);\n    };\n  };\n  setupMockAPI();\n}\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(/*#__PURE__*/_jsxDEV(React.StrictMode, {\n  children: [/*#__PURE__*/_jsxDEV(GlobalStyle, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 205,\n    columnNumber: 5\n  }, this), /*#__PURE__*/_jsxDEV(App, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 206,\n    columnNumber: 5\n  }, this)]\n}, void 0, true, {\n  fileName: _jsxFileName,\n  lineNumber: 204,\n  columnNumber: 3\n}, this));\nvar _c;\n$RefreshReg$(_c, \"GlobalStyle\");","map":{"version":3,"names":["React","ReactDOM","App","createGlobalStyle","jsxDEV","_jsxDEV","GlobalStyle","_c","process","env","NODE_ENV","setupMockAPI","console","log","originalFetch","window","fetch","url","options","startsWith","includes","Promise","resolve","json","traffic_rate","Math","floor","random","avg_response_time","security_score","traffic_history","Array","from","length","_","i","timestamp","value","reverse","threat_distribution","type","count","ok","id","source_ip","Date","now","toISOString","severity","details","affected_metric","active","packets_captured","duration","packets_per_second","message","status","active_threats","vulnerabilities_count","protected_assets","last_threat_time","security_status","cve_id","description","affected_component","discovery_date","remediation","root","createRoot","document","getElementById","render","StrictMode","children","fileName","_jsxFileName","lineNumber","columnNumber","$RefreshReg$"],"sources":["C:/network monitoring project/frontend/src/index.js"],"sourcesContent":["import React from 'react';\r\nimport ReactDOM from 'react-dom/client';\r\nimport App from './app';\r\nimport { createGlobalStyle } from 'styled-components';\r\n\r\n// Global styles\r\nconst GlobalStyle = createGlobalStyle`\r\n  :root {\r\n    --primary: #00b4d8;\r\n    --primary-dark: #0077b6;\r\n    --primary-light: #90e0ef;\r\n    --secondary: #7209b7;\r\n    --secondary-light: #9d4edd;\r\n    --background: #0a0a1b;\r\n    --surface: #1a1a2e;\r\n    --surface-light: #2a2a3e;\r\n    --danger: #e63946;\r\n    --success: #06d6a0;\r\n    --warning: #ffd166;\r\n    \r\n    --text-primary: #ffffff;\r\n    --text-secondary: #d1d5db;\r\n    --text-tertiary: #9ca3af;\r\n  }\r\n\r\n  * {\r\n    box-sizing: border-box;\r\n    margin: 0;\r\n    padding: 0;\r\n  }\r\n\r\n  body {\r\n    font-family: 'Roboto', sans-serif;\r\n    background-color: var(--background);\r\n    color: var(--text-primary);\r\n    overflow-x: hidden;\r\n  }\r\n\r\n  h1, h2, h3, h4, h5, h6 {\r\n    font-family: 'Exo', sans-serif;\r\n    font-weight: 700;\r\n    letter-spacing: 0.5px;\r\n  }\r\n\r\n  a {\r\n    text-decoration: none;\r\n    color: inherit;\r\n  }\r\n\r\n  button {\r\n    font-family: 'Exo', sans-serif;\r\n    border: none;\r\n    outline: none;\r\n    cursor: pointer;\r\n  }\r\n\r\n  /* Scrollbar styling */\r\n  ::-webkit-scrollbar {\r\n    width: 6px;\r\n    height: 6px;\r\n  }\r\n\r\n  ::-webkit-scrollbar-track {\r\n    background: var(--surface);\r\n  }\r\n\r\n  ::-webkit-scrollbar-thumb {\r\n    background: var(--primary-dark);\r\n    border-radius: 3px;\r\n  }\r\n\r\n  ::-webkit-scrollbar-thumb:hover {\r\n    background: var(--primary);\r\n  }\r\n\r\n  /* For Firefox */\r\n  * {\r\n    scrollbar-width: thin;\r\n    scrollbar-color: var(--primary-dark) var(--surface);\r\n  }\r\n`;\r\n\r\n// Set up API mocking for development\r\nif (process.env.NODE_ENV === 'development') {\r\n  const setupMockAPI = () => {\r\n    console.log('Setting up mock API responses for development');\r\n    \r\n    // Setup mock fetch responses\r\n    const originalFetch = window.fetch;\r\n    window.fetch = function(url, options) {\r\n      // For testing - log all API calls\r\n      console.log(`API Call: ${url}`, options);\r\n      \r\n      // If fetching from a real server, pass through\r\n      if (url.startsWith('http')) {\r\n        return originalFetch(url, options);\r\n      }\r\n      \r\n      // Check if we should mock the response\r\n      if (url.includes('/api/metrics')) {\r\n        return Promise.resolve({\r\n          json: () => Promise.resolve({\r\n            traffic_rate: Math.floor(Math.random() * 100 + 50),\r\n            avg_response_time: Math.floor(Math.random() * 100 + 20),\r\n            security_score: Math.floor(Math.random() * 15 + 80),\r\n            traffic_history: Array.from({ length: 24 }, (_, i) => ({\r\n              timestamp: `${23 - i}:00`,\r\n              value: Math.floor(Math.random() * 100 + 50)\r\n            })).reverse(),\r\n            threat_distribution: [\r\n              { type: 'Intrusion', count: Math.floor(Math.random() * 10 + 5) },\r\n              { type: 'DDoS', count: Math.floor(Math.random() * 5 + 2) },\r\n              { type: 'Malware', count: Math.floor(Math.random() * 8 + 3) },\r\n              { type: 'Phishing', count: Math.floor(Math.random() * 12 + 6) }\r\n            ]\r\n          }),\r\n          ok: true\r\n        });\r\n      } \r\n      else if (url.includes('/api/threats')) {\r\n        return Promise.resolve({\r\n          json: () => Promise.resolve(Array.from({ length: 5 }, (_, i) => ({\r\n            id: i + 1,\r\n            type: ['Intrusion Attempt', 'Suspicious Traffic', 'Port Scan', 'DDoS Attempt', 'Data Exfiltration'][Math.floor(Math.random() * 5)],\r\n            source_ip: `192.168.1.${Math.floor(Math.random() * 255)}`,\r\n            timestamp: new Date(Date.now() - Math.floor(Math.random() * 3600000)).toISOString(),\r\n            severity: ['Low', 'Medium', 'High', 'Critical'][Math.floor(Math.random() * 4)],\r\n            details: 'Suspicious activity detected on network'\r\n          }))),\r\n          ok: true\r\n        });\r\n      } \r\n      else if (url.includes('/api/anomalies')) {\r\n        return Promise.resolve({\r\n          json: () => Promise.resolve(Array.from({ length: 3 }, (_, i) => ({\r\n            id: i + 1,\r\n            type: ['Traffic Spike', 'Unusual Port Activity', 'Protocol Anomaly', 'Connection Pattern', 'Data Volume Anomaly'][Math.floor(Math.random() * 5)],\r\n            timestamp: new Date(Date.now() - Math.floor(Math.random() * 3600000)).toISOString(),\r\n            severity: ['Low', 'Medium', 'High'][Math.floor(Math.random() * 3)],\r\n            affected_metric: ['Bandwidth', 'Connection Count', 'Protocol Distribution'][Math.floor(Math.random() * 3)],\r\n            details: 'Unusual pattern detected in network traffic'\r\n          }))),\r\n          ok: true\r\n        });\r\n      } \r\n      else if (url.includes('/api/status')) {\r\n        return Promise.resolve({\r\n          json: () => Promise.resolve({\r\n            active: Math.random() > 0.5,\r\n            packets_captured: Math.floor(Math.random() * 5000 + 1000),\r\n            duration: Math.floor(Math.random() * 300 + 60),\r\n            packets_per_second: Math.floor(Math.random() * 50 + 10)\r\n          }),\r\n          ok: true\r\n        });\r\n      } \r\n      else if (url.includes('/api/start_analysis') || url.includes('/api/stop_analysis')) {\r\n        return Promise.resolve({\r\n          json: () => Promise.resolve({\r\n            message: url.includes('start') ? 'Analysis started successfully' : 'Analysis stopped successfully',\r\n            status: 'success'\r\n          }),\r\n          ok: true\r\n        });\r\n      } \r\n      else if (url.includes('/api/security/overview')) {\r\n        return Promise.resolve({\r\n          json: () => Promise.resolve({\r\n            security_score: Math.floor(Math.random() * 15 + 80),\r\n            active_threats: Math.floor(Math.random() * 5),\r\n            vulnerabilities_count: Math.floor(Math.random() * 10 + 5),\r\n            protected_assets: Math.floor(Math.random() * 5 + 10),\r\n            last_threat_time: new Date(Date.now() - Math.floor(Math.random() * 3600000)).toISOString(),\r\n            security_status: Math.random() > 0.7 ? 'Good' : 'Fair'\r\n          }),\r\n          ok: true\r\n        });\r\n      } \r\n      else if (url.includes('/api/security/vulnerabilities')) {\r\n        return Promise.resolve({\r\n          json: () => Promise.resolve(Array.from({ length: 7 }, (_, i) => ({\r\n            cve_id: `CVE-2024-${1000 + i}`,\r\n            severity: ['Low', 'Medium', 'High', 'Critical'][Math.floor(Math.random() * 4)],\r\n            description: ['Remote code execution vulnerability', 'SQL injection vulnerability', 'Cross-site scripting vulnerability', 'Authentication bypass vulnerability'][Math.floor(Math.random() * 4)],\r\n            affected_component: ['API Gateway', 'Web Frontend', 'Database', 'Authentication Service'][Math.floor(Math.random() * 4)],\r\n            status: ['Open', 'In Progress', 'Resolved'][Math.floor(Math.random() * 3)],\r\n            discovery_date: new Date(Date.now() - Math.floor(Math.random() * 30 * 86400000)).toISOString(),\r\n            remediation: 'Update to the latest version and apply security patches'\r\n          }))),\r\n          ok: true\r\n        });\r\n      }\r\n      \r\n      // If no mock is defined, pass through to the actual fetch\r\n      return originalFetch(url, options);\r\n    };\r\n  };\r\n\r\n  setupMockAPI();\r\n}\r\n\r\nconst root = ReactDOM.createRoot(document.getElementById('root'));\r\nroot.render(\r\n  <React.StrictMode>\r\n    <GlobalStyle />\r\n    <App />\r\n  </React.StrictMode>\r\n);"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}